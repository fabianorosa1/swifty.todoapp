{"remainingRequest":"/Users/vporokhov/Desktop/SwiftyCloud/swifty.demo/node_modules/babel-loader/lib/index.js!/Users/vporokhov/Desktop/SwiftyCloud/swifty.demo/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/vporokhov/Desktop/SwiftyCloud/swifty.demo/src/views/Tasks.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/vporokhov/Desktop/SwiftyCloud/swifty.demo/src/views/Tasks.vue","mtime":1533823950277},{"path":"/Users/vporokhov/Desktop/SwiftyCloud/swifty.demo/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/Users/vporokhov/Desktop/SwiftyCloud/swifty.demo/node_modules/babel-loader/lib/index.js","mtime":1526583314000},{"path":"/Users/vporokhov/Desktop/SwiftyCloud/swifty.demo/node_modules/vue-loader/lib/index.js","mtime":1527860006000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  data: function data() {\n    return {\n      activeTabName: 'tasks',\n      task: null,\n      tasks: [],\n      filter: 'all'\n    };\n  },\n  watch: {\n    activeTabName: function activeTabName(val) {\n      this.$router.push({\n        name: val\n      });\n    },\n    filter: function filter() {\n      this.fetchTasks();\n    }\n  },\n  created: function created() {\n    if (this.$store.state.token === null) {\n      this.$router.push({\n        name: 'signin'\n      });\n    }\n\n    this.fetchTasks();\n  },\n  methods: {\n    fetchTasks: function fetchTasks() {\n      var _this = this;\n\n      this.$store.dispatch('getTasks', this.filter).then(function (response) {\n        _this.tasks = response.data;\n      });\n    },\n    addTask: function addTask() {\n      var _this2 = this;\n\n      this.$store.dispatch('addTask', {\n        task: this.task\n      }).then(function () {\n        _this2.task = null;\n      }).finally(function () {\n        _this2.fetchTasks();\n      });\n    },\n    doneTask: function doneTask(task) {\n      var _this3 = this;\n\n      this.$store.dispatch('doneTask', task.id).then(function () {\n        _this3.fetchTasks();\n      });\n    },\n    deleteTask: function deleteTask(task) {\n      var _this4 = this;\n\n      this.$store.dispatch('deleteTask', task.id).then(function () {\n        _this4.fetchTasks();\n      });\n    }\n  }\n};",{"version":3,"sources":["Tasks.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8CA,eAAA;AACA,MADA,kBACA;AACA,WAAA;AACA,qBAAA,OADA;AAEA,YAAA,IAFA;AAGA,aAAA,EAHA;AAIA,cAAA;AAJA,KAAA;AAMA,GARA;AAUA,SAAA;AACA,iBADA,yBACA,GADA,EACA;AACA,WAAA,OAAA,CAAA,IAAA,CAAA;AAAA,cAAA;AAAA,OAAA;AACA,KAHA;AAKA,UALA,oBAKA;AACA,WAAA,UAAA;AACA;AAPA,GAVA;AAoBA,SApBA,qBAoBA;AACA,QAAA,KAAA,MAAA,CAAA,KAAA,CAAA,KAAA,KAAA,IAAA,EAAA;AACA,WAAA,OAAA,CAAA,IAAA,CAAA;AAAA,cAAA;AAAA,OAAA;AACA;;AAEA,SAAA,UAAA;AACA,GA1BA;AA4BA,WAAA;AACA,cADA,wBACA;AAAA;;AACA,WAAA,MAAA,CAAA,QAAA,CAAA,UAAA,EAAA,KAAA,MAAA,EAAA,IAAA,CAAA,oBAAA;AACA,cAAA,KAAA,GAAA,SAAA,IAAA;AACA,OAFA;AAGA,KALA;AAOA,WAPA,qBAOA;AAAA;;AACA,WAAA,MAAA,CAAA,QAAA,CAAA,SAAA,EAAA;AAAA,cAAA,KAAA;AAAA,OAAA,EAAA,IAAA,CAAA,YAAA;AACA,eAAA,IAAA,GAAA,IAAA;AACA,OAFA,EAEA,OAFA,CAEA,YAAA;AACA,eAAA,UAAA;AACA,OAJA;AAKA,KAbA;AAeA,YAfA,oBAeA,IAfA,EAeA;AAAA;;AACA,WAAA,MAAA,CAAA,QAAA,CAAA,UAAA,EAAA,KAAA,EAAA,EAAA,IAAA,CAAA,YAAA;AACA,eAAA,UAAA;AACA,OAFA;AAGA,KAnBA;AAqBA,cArBA,sBAqBA,IArBA,EAqBA;AAAA;;AACA,WAAA,MAAA,CAAA,QAAA,CAAA,YAAA,EAAA,KAAA,EAAA,EAAA,IAAA,CAAA,YAAA;AACA,eAAA,UAAA;AACA,OAFA;AAGA;AAzBA;AA5BA,CAAA","sourcesContent":["<template>\n  <div class=\"tasks\">\n    <el-row>\n      <el-col>\n        <el-tabs v-model=\"activeTabName\">\n          <el-tab-pane label=\"TASKS\" name=\"tasks\"></el-tab-pane>\n          <el-tab-pane label=\"PROFILE\" name=\"profile\"></el-tab-pane>\n        </el-tabs>\n      </el-col>\n    </el-row>\n\n    <el-row>\n      <el-col :lg=\"10\">\n        <div class=\"tasks-filter\">\n          <el-button size=\"mini\" @click=\"filter = 'all'\" :class=\"{ active: filter === 'all' }\">All</el-button>\n          <el-button size=\"mini\" @click=\"filter = 'done'\" :class=\"{ active: filter === 'done' }\">Completed</el-button>\n          <el-button size=\"mini\" @click=\"filter = 'new'\" :class=\"{ active: filter === 'new' }\">Active</el-button>\n        </div>\n\n        <div class=\"tasks-form\">\n          <input type=\"text\" @keyup.enter=\"addTask\" v-model=\"task\" placeholder=\"Enter your task here\" class=\"tasks-input\">\n          <a href=\"#\" class=\"tasks-button\" @click.prevent.stop=\"addTask\">\n            <i class=\"el-icon-circle-plus-outline\"></i>\n          </a>\n        </div>\n\n        <ul class=\"tasks-list\" v-if=\"tasks.length\">\n          <li class=\"tasks-item\" v-for=\"task in tasks\" :key=\"task.id\">\n            <a href=\"#\" class=\"tasks-item__check\" @click.prevent.stop=\"doneTask(task)\" v-if=\"task.status !== 'done'\">\n              <i class=\"el-icon-circle-check-outline\"></i>\n            </a>\n            <span class=\"tasks-item__check checked\" v-if=\"task.status === 'done'\">\n              <i class=\"el-icon-circle-check-outline\"></i>\n            </span>\n            <span class=\"tasks-item__name\">{{ task.task }}</span>\n            <a href=\"#\" class=\"tasks-item-delete\" @click.prevent.stop=\"deleteTask(task)\">\n              <i class=\"el-icon-delete\"></i>\n            </a>\n          </li>\n        </ul>\n      </el-col>\n    </el-row>\n  </div>\n</template>\n\n<script>\nexport default {\n  data () {\n    return {\n      activeTabName: 'tasks',\n      task: null,\n      tasks: [],\n      filter: 'all'\n    }\n  },\n\n  watch: {\n    activeTabName (val) {\n      this.$router.push({ name: val })\n    },\n\n    filter () {\n      this.fetchTasks()\n    }\n  },\n\n  created () {\n    if (this.$store.state.token === null) {\n      this.$router.push({ name: 'signin' })\n    }\n\n    this.fetchTasks()\n  },\n\n  methods: {\n    fetchTasks () {\n      this.$store.dispatch('getTasks', this.filter).then(response => {\n        this.tasks = response.data\n      })\n    },\n\n    addTask () {\n      this.$store.dispatch('addTask', { task: this.task }).then(() => {\n        this.task = null\n      }).finally(() => {\n        this.fetchTasks()\n      })\n    },\n\n    doneTask (task) {\n      this.$store.dispatch('doneTask', task.id).then(() => {\n        this.fetchTasks()\n      })\n    },\n\n    deleteTask (task) {\n      this.$store.dispatch('deleteTask', task.id).then(() => {\n        this.fetchTasks()\n      })\n    }\n  }\n}\n</script>\n"],"sourceRoot":"src/views"}]}